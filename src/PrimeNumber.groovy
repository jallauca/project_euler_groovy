// Highly divisible triangular number (Problem 12) (https://projecteuler.net/problem=12)

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
// ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

package project.euler.problems

class PrimeNumber {
  def static primes_up_to(long max) {
    new PrimeGenerator().takeWhile { it <= max }.collect()
  }

  def static n_primes(int n) {
    new PrimeGenerator().take(n).collect()
  }

  def static List<Long> find_prime_factors(long n) {
    def primes = primes_up_to( Math.sqrt(n) as long )
    primes.findAll { n % it == 0 }
  }

  def static prime_factors(long n) {
    def primes = PrimeNumber.primes_up_to(n)

    def prime_factors_recrsv
    prime_factors_recrsv = { long dividend ->
        if ( dividend <= 1 ) return []

        def prime = primes.find { prime -> dividend % prime == 0 }
        [prime] + prime_factors_recrsv( dividend.div(prime) as long )
    }

    prime_factors_recrsv(n)
  }

  def static factors(long n) {
    if ( n < 1 ) return []
    if ( n == 1 ) return [1]
    def generator = new PrimeGenerator()
    def factors = [1, n] as Set
    def primeDivisorTooLarge = false
    while ( !primeDivisorTooLarge ) {
      def prime = generator.next()
      def divisorMultiple = 1
      while ( true ) {
        def divisor = prime * divisorMultiple
        def quotient = n.div(divisor)
        if ( quotient < 2 ) {
          if ( divisorMultiple == 1 ) { primeDivisorTooLarge = true }
          break
        }
        if ( n % divisor == 0 ) factors.add(divisor)
        divisorMultiple += 1
      }
    }
    factors.toList().sort()
  }
}
